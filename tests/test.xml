<?xml version="1.0"?>
<!--

Execute the default 'run' target
ant -f test.xml
OR
ant -f test.xml run

PLEASE NOTE THAT YOU MUST ALTER THE RUNNER'S URL ACCORDING TO YOUR ENVIRONMENT.
-->
<project name="testbox-ant-runner" default="run" basedir=".">
	
	<!-- FILL OUT THE BUNDLES TO TEST, CAN BE A LIST OF CFC PATHS -->
	<property name="test.bundles"				value="" />
	<!-- FILL OUT THE DIRECTORY MAPPING TO TEST -->
	<property name="test.directory"				value="tests.specs" />
	<property name="test.directoryExcludes"		value="" />
	<!-- FILL OUT IF YOU WANT THE DIRECTORY RUNNER TO RECURSE OR NOT -->
	<property name="test.recurse"				value="true" />
	<!-- FILL OUT THE LABELS YOU WANT TO APPLY TO THE TESTS -->
	<property name="test.labels"				value="" />
	<!-- FILL OUT THE TEST REPORTER YOU WANT, AVAILABLE REPORTERS ARE: ANTJunit, Codexwiki, console, dot, doc, json, junit, min, raw, simple, tap, text, xml -->
	<property name="test.reporter"				value="text" />
	<!-- FILL OUT WHERE REPORTING RESULTS ARE STORED --> 
	<property name="report.dir"  				value="${basedir}/results" />
	
	<!-- Load Contrib Tasks -->
	<path id="cp">
		<fileset dir="../workbench/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
	
	<!-- init -->
	<target name="init" description="Init the tests">
		<!-- Default environment check, if not passed via -Denvironment -->
		<condition property="environment" value="local">
			<not><isset property="environment" /></not>
		</condition>
		<if>
			<available file="test-${environment}.properties" />
			<then>
				<!-- Load env properties -->
				<echo>Loading properties from environment: ${environment}</echo>
				<loadproperties srcFile="test-${environment}.properties"/>
			</then>
		</if>
		<!-- Load root properties -->
		<echo>Loading base properties</echo>
		<loadproperties srcFile="test.properties"/>
		
		<!-- Start Init -->
		<delete dir="${report.dir}" />
		<!-- update permissions -->
		<antcall target="update.permissions" /> 
		<!-- Timestamp and latest run -->
		<tstamp prefix="start">
			<format property="TODAY" pattern="MM-dd-YYYY hh:mm:ss aa"/>
		</tstamp>
		<concat destfile="${report.dir}/latestrun.log">Tests ran at ${start.TODAY}</concat>
	</target>
	
	<!-- update permissions on reports -->
	<target name="update.permissions" description="Update staging server permissions">
		<!-- Integration permissions -->
		<if>
			<equals arg1="${environment}" arg2="auto" />
			<then>
				<chmod file="${report.dir}/**" perm="g+wxrs" type="both" verbose="true" />
				<chmod file="${report.dir}/**" perm="o+wrs"  type="both" verbose="true" />
				<chown owner="stg-ortus" verbose="true">
					<fileset dir="${report.dir}" />
				</chown>
			</then>
			<else>
			</else>
		</if>
	</target>
	
	<target name="run" depends="init" description="Run our tests and produce awesome results">  

		<!-- Directory Runner 
			Executes recursively all tests in the passed directory and stores the results in the 
			'dest' param.  So if you want to rename the file, do so here.

			 Available params for directory runner:
			 - Reporter
			 - Directory
			 - Recurse
			 - Labels
		-->
		<get dest="${report.dir}/results.txt" 
			 src="${url.runners.default}&amp;directory=${test.directory}&amp;recurse=${test.recurse}&amp;reporter=${test.reporter}&amp;labels=${test.labels}&amp;reportPath=${report.dir}&amp;propertiesSummary=true&amp;directoryExcludes=${test.directoryExcludes}&amp;cfid=123&amp;cftoken=123" 
			 verbose="true"/>
		
		<!-- Bundles Runner
			You can also run tests for specific bundles by using the runner with the bundles params

			Available params for runner:
			 - Reporter
			 - Bundles
			 - Labels

		<get dest="${report.dir}/results.html" 
			 src="${url.runners.default}&amp;bundles=${test.bundles}&amp;reporter=${test.reporter}&amp;labels=${test.labels}&amp;propertiesSummary=true" 
			 verbose="true"/>
		 -->
		
        <!-- Read Result Properties -->
        <property file="${report.dir}/TEST.properties"/>
        <!-- Echo them out -->
        <echoproperties regex="^(test|total).*"/>
        <!-- Echo actual results -->
        <loadresource property="testresults">
	       <file file="${report.dir}/results.txt"/>
	    </loadresource>
	    <echo message="${testresults}"/>
        <!-- Fail build if they failed -->
        <fail if="test.failed"/>
	</target>

	<target name="runEngine" depends="init" description="Generic run method for alternate CFML engines">  
		<property name="reportDir" value="${report.dir}/${engine}" />

		<mkdir dir="${reportDir}" />
		<!-- Touch our TEST.properties file so ACF can find it -->
		<chmod file="${reportDir}/**" perm="775" type="both" />

		<macrodef name="propertycopy">
		  <attribute name="name"/>
		  <attribute name="from"/>
		  <sequential>
		    <property name="@{name}" value="${@{from}}"/>
		  </sequential>
		</macrodef>

		<property name="runnerPath" value="url.runners.${engine}"/>
		<propertycopy name="urlRunner" from="${runnerPath}"/>
		
		<mkdir dir="${reportDir}" />

		<get dest="${reportDir}/results.txt" 
			 src="${urlRunner}&amp;directory=${test.directory}&amp;recurse=${test.recurse}&amp;reporter=${test.reporter}&amp;labels=${test.labels}&amp;reportPath=${reportDir}&amp;propertiesSummary=true&amp;directoryExcludes=${test.directoryExcludes}&amp;cfid=123&amp;cftoken=123" 
			 verbose="true"/>

        <!-- Read Result Properties -->
        <property file="${reportDir}/TEST.properties"/>
        <!-- Echo them out -->
        <echoproperties regex="^(test|total).*"/>
        <!-- Echo actual results -->
        <loadresource property="testresults">
	       <file file="${reportDir}/results.txt"/>
	    </loadresource>
	    <echo message="${testresults}"/>
        <!-- Fail build if they failed -->
        <fail if="test.failed"/>
	</target>

</project>
