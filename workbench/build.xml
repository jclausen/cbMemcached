<?xml version="1.0"?>
<project name="build" basedir="../" default="build">
	<!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
	<property name="project.name" 		value="cbmemcached" />
	<property name="module.name" 		value="cbmemcached" />
	<property name="project.version" 	value="3.2.1.2"/>
	<property name="groupID" 			value="silowebworks" />

	<condition property="isTravis" else="false">
      <isset property="isTravis"/>
    </condition>

	<!-- Build Labels -->
	<tstamp prefix="start"/>
	<path id="cp">
		<fileset dir="workbench/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
	
	<!-- Init -->
	<target name="init" description="Init Build" unless="src.isInit">
		<!-- Default environment check, if not passed via -Denvironment -->
		<condition property="environment" value="local">
			<not><isset property="environment" /></not>
		</condition>
		<if>
			<available file="workbench/build-${environment}.properties" />
			<then>
				<!-- Load env properties -->
				<echo>Loading properties from environment: ${environment}</echo>
				<loadproperties srcFile="workbench/build-${environment}.properties"/>
			</then>
		</if>
		<!-- Load root properties -->
		<echo>Loading base properties</echo>
		<loadproperties srcFile="workbench/build.properties"/>

		<!-- Build Number -->
		<propertyfile file="workbench/build.number" comment="Build Number for ANT. Edit not!">
			<entry key="build.number" 
					type="int" 
			     	operation="+"
					pattern="00000"
			     	default="1" />
		</propertyfile>

		<property file="workbench/build.number"/>
		
		<!-- Build Label -->
		<property name="build.label" value="${project.name}-${project.version}.${build.number}-${start.DSTAMP}${start.TSTAMP}"/>
		<!-- Get Build Dependencies -->
 		<antcall target="getDependencies" />
		<!-- Cleanup + Init -->
		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build}"/>
		<chmod file="${dir.build}/**" perm="og+wrs" type="both" />
		<!-- Mark as init -->
		<property name="src.isInit" value="true" />
	</target>
	
	<!-- Build Project -->
	<!-- NOTE:  Add run-alt-engine-tests back to `depends` attribute once COMMANDBOX-448 fix is in the current release -->
	<target name="build" depends="init,run-tests" description="Build the project">
		<!-- Copy build ID -->
		<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
		
		<!-- Copy src -->	
      	<copy todir="${dir.build}" encoding="UTF-8">
        	<fileset dir="modules/${module.name}" />
        </copy>
        <!-- Copy readme -->
        <copy todir="${dir.build}" encoding="UTF-8" file="readme.md" overwrite="true" />
        <copy todir="${dir.build}" encoding="UTF-8" file="changelog.md" overwrite="true" />
        <copy todir="${dir.build}" encoding="UTF-8" file="instructions.md" overwrite="true" />
        
        <!-- Replace Version + Build Numbers -->
		<replaceregexp match='@build.version@' replace="${project.version}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		
		<!-- Api Docs -->
		<antcall target="build.apidocs" />
        
        <!-- Zip it -->
		<zip destfile="${dir.exports}/${project.name}-${project.version}.zip" basedir="${dir.build}"></zip>
		
		<!-- Build Checksums -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		<checksum forceoverwrite="true" algorithm="SHA-512" fileext=".sha512">
			<fileset dir="${dir.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
				  
		<!-- Cleanup -->	
		<if>
			<equals arg1="$isTravis" arg2="false" />
			<then>
				<delete dir="${dir.build}" />
			</then>
		</if>
	</target>

	<!-- Build API Docs -->
 	<target name="build.apidocs" description="Builds the api docs" depends="init">
 		<!-- Create API apidocs dir -->
 		<mkdir dir="${dir.api}"/>
 		<!-- Install dependencies for docs -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="install --force" />
		</exec>
		<!-- Startup the apidocs server, wait for a few seconds for server to start -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="server start openbrowser=false --force port=${apidocs.port}" />
		</exec>
		<sleep seconds="5"/>
		<!-- Get the apidocs now -->
		<get dest="${dir.build}/docbox.html" 
			 src="${url.apidocs}?version=${project.version}&amp;path=${dir.api}" 
			 verbose="true"
			 retries="5"/>
		<!-- stop server -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="server stop" />
		</exec>
		<delete file="${dir.build}/docbox.html" />
		<!-- Zip API Docs -->
		<zip destfile="${dir.exports}/${project.name}-apidocs-${project.version}.zip" basedir="${dir.api}"></zip>
 	</target>
	
	<!-- Run Tests For Platform -->
    <target name="run-tests" description="Run TestBox Tests" depends="init">
    	<!-- Start our default Commandbox server ( L4.5 ) -->
		<exec executable="box" dir="${basedir}">
			<arg line="server start" />
		</exec>

    	<echo>Running Tests for ${project.name}</echo>
    	
    	<!-- Determine Test target: Are we jenkins or local or travis -->
        
		<property name="test.target" value="run" />
		
    	<!-- Run the tests against the default server -->
    	<subant target="${test.target}">
          	<fileset dir="tests" includes="test.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>

        <!-- Stop the default server -->
        <exec executable="box" dir="${basedir}">
			<arg line="server stop" />
		</exec>
    </target>


	<!-- Docker Tests for Different Engines -->
    <target name="run-alt-engine-tests" description="Run Docker Container Tests" if="isTravis">
 		<foreach param="engine" list="lucee5,acf11,acf2016" target="run-alt-engine-test" />
    </target>

    <target name="run-alt-engine-test" description="In-loop runner for engine tests">
    	
    	<property name="serverName" value="${engine}"/>

    	<echo>========= Running CFEngine Tests for: ${engine} ==============</echo>

    	<antcall target="startServer" inheritRefs="true" />

		<subant target="runEngine">
          	<fileset dir="tests" includes="test.xml"/>
    		<property name="engine" value="${engine}" />
    		<property name="environment" value="${environment}" />
        </subant>

 		<antcall target="stopServer" inheritRefs="true" />

        <echo>========= CFEngine Tests for ${engine} completed. ==============</echo>
    	
    </target>
    
    <!-- Get Dependencies -->
	<target name="getDependencies" description="Get all the necessary dependencies for the build process using: box.repo.url">
		<!-- Install dependencies for project -->
		<exec executable="box" dir="${basedir}">
			<arg line="install" />
		</exec>
	</target>


	<target name="startServer" description="Starts a single server">
		<exec executable="box" dir="${basedir}">
			<arg line="server start name=${serverName} directory=${basedir} serverConfigFile=${basedir}/workbench/servers/server-${serverName}.json" />
		</exec>
	</target>

	<target name="stopServer" description="Stops a single server">
		<exec executable="box" dir="${basedir}">
			<arg line="server stop name=${serverName} directory=${basedir} serverConfigFile=${basedir}/workbench/servers/server-${serverName}.json" />
		</exec>
	</target>

</project>
